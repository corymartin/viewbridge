#!/usr/bin/env node

var path       = require('path');
var program    = require('commander');
var watch      = require('watch');
var colors     = require('colors');
var viewbridge = require('../lib/index');
var ENGINES    = require('../lib/engines');
var pkg        = require('../package');


function list(str) {
  return str.split(',');
};


program
  .version(pkg.version)
  .usage('--engine engine_name [options]')
  .option('-e, --engine <engine>',        'Template engine. Required.')
  .option('-d, --dir <dir>',              'Directory of view files. Default is current directory.', process.cwd())
  .option('-v, --views <view1,view2,..>', 'Views to compile.', list)
  .option('-o, --output <output>',        'Output file path.')
  .option('-n, --namespace <namespace>',  'Clientside namespace. Default is `viewbridge`', 'viewbridge')
  .option('-E, --ext <extension>',        'File extension of view files.')
  .option('-w, --watch',                  'Compile templates when files change.')
  .parse(process.argv);


// Engine is required
if (!program.engine) {
  console.error('\nError: Required argument missing: engine'.red);
  program.help();
  process.exit(1);
}
else if (!ENGINES.isSupported(program.engine)) {
  console.error('\nError: Engine not supported: %s'.red, program.engine);
  program.help();
  process.exit(1);
}


/*
 * Call Viewbridge
 */
if (!program.watch) {
  callViewbridge();
}
else {
  /*
   * Watch
   */
  var watchOptions = {
    ignoreDotFiles: true
  , persistent:     true
  , interval:       500
  };
  var ext = program.ext || ENGINES[program.engine].ext;
  ext = ext.toLowerCase();
  var isExt = function(file) {
    return path.extname(file).toLowerCase() === ext;
  };
  var onTreeChange = function(file) {
    if (! isExt(file)) return;
    console.info('\nChange detected: %s'.green, file.grey.underline);
    callViewbridge();
  };

  console.info('Viewbridge watching dir: %s'.green, program.dir.grey.underline);
  watch.createMonitor(program.dir, watchOptions, function(monitor) {
    monitor.on('created', onTreeChange);
    monitor.on('changed', onTreeChange);
    monitor.on('removed', onTreeChange);
  });
}


function callViewbridge() {
  viewbridge(
    {
      dir:       program.dir
    , namespace: program.namespace
    , output:    program.output
    , views:     program.views
    , engine:    program.engine
    , ext:       program.ext
    }
  , function(err, info) {
      if (err) {
        console.error('\nError:\n %s'.red, err);
        process.exit(1);
      }

      if (program.output) {
        console.info(info.file);
      }
      else {
        console.log(info.javascript);
      }
    }
  );
};
