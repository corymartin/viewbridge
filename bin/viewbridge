#!/usr/bin/env node

var fs         = require('fs');
var path       = require('path');
var program    = require('commander');
var watch      = require('watch');
var colors     = require('colors');
var viewbridge = require('../lib/index');
var engines    = require('../lib/engines');
var pkg        = require('../package.json');

/*
 * Get options by either the config file or the CLI app
 */
var options;

function viewsList(str) {
  return str.split(',');
};

/*
 * CLI
 * Commander.js
 */
program
  .version(pkg.version)
  .usage('--engine engine_name [options]')
  .option('-e, --engine <engine>',        'Template engine. Required.')
  .option('-d, --dir <dir>',              'Directory of view files. Default is current directory.', process.cwd())
  .option('-v, --views <v1,v2,..>',       'Views to compile.', viewsList)
  .option('-a, --all-views',              'Compile all views.')
  .option('-x, --ext <extension>',        'File extension of view files.')
  .option('-o, --output <output>',        'Output file path.')
  .option('-R, --no-runtime',             'Do not include the engine\'s runtime.')
  .option('-n, --namespace <namespace>',  'Clientside namespace. Default is `viewbridge`', 'viewbridge')
  .option('-w, --watch',                  'Compile templates when files change.')
  .parse(process.argv);


/*
 * Config file
 */
if (process.argv.length === 2 && fs.existsSync('viewbridge.json')) {
  var file = fs.readFileSync('viewbridge.json', 'utf8');
  options = JSON.parse(file);
}
/*
 * Otherwise use CLI input
 */
else {
  options = {
    dir:       program.dir
  , namespace: program.namespace
  , output:    program.output
  , views:     program.views
  , allviews:  program.allViews
  , engine:    program.engine
  , ext:       program.ext
  , runtime:   program.runtime
  };
}


// Engine is required
if (!options.engine) {
  console.error('\nError: Required argument missing: engine'.red);
  program.help();
  process.exit(1);
}
else if (!engines.isSupported(options.engine)) {
  console.error('\nError: Engine not supported: %s'.red, options.engine);
  program.help();
  process.exit(1);
}


/*
 * Call Viewbridge
 */
if (!program.watch) {
  callViewbridge();
}
else {
  /*
   * Watch
   */
  var watchOptions = {
    ignoreDotFiles: true
  , persistent:     true
  , interval:       500
  };
  var ext = options.ext || engines.ENGINE[options.engine].ext;
  ext = ext.toLowerCase();
  var isExt = function(file) {
    return path.extname(file).toLowerCase() === ext;
  };
  var onTreeChange = function(file) {
    if (! isExt(file)) return;
    console.info('\nChange detected: %s'.green, file.grey.underline);
    callViewbridge();
  };

  console.info('Viewbridge watching dir: %s'.green, options.dir.grey.underline);
  callViewbridge();
  watch.createMonitor(options.dir, watchOptions, function(monitor) {
    monitor.on('created', onTreeChange);
    monitor.on('changed', onTreeChange);
    monitor.on('removed', onTreeChange);
  });
}


function callViewbridge() {
  viewbridge(
    options
  , function(err, info) {
      if (err) {
        console.error('\nError:\n %s'.red, err);
        process.exit(1);
      }

      if (options.output) {
        console.info(info.file);
      }
      else {
        console.log(info.javascript);
      }
    }
  );
};
