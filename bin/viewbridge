#!/usr/bin/env node

var path       = require('path');
var program    = require('commander');
var watch      = require('watch');
var viewbridge = require('../lib/index');
var ENGINES    = require('../lib/engines');
var pkg        = require('../package');


function list(str) {
  return str.split(',');
};


program
  .version(pkg.version)
  .usage('--dir app/views [options]')
  .option('-d, --dir <dir>',              'required - directory of template files')
  .option('-e, --engine <engine>',        'required - template engine')
  .option('-v, --views <view1,view2,..>', 'templates to compile', list)
  .option('-o, --output <output>',        'output file path')
  .option('-n, --namespace <namespace>',  'clientside namespace - default is `viewbridge`', 'viewbridge')
  .option('-E, --ext <extension>',        'file extension of view files - defaults are Jade:`.jade`, Hogan:`.hjs`', '.jade')
  .option('-w, --watch',                  'compiles templates when files change')
  .parse(process.argv);


// Views dir is required
if (!program.dir) {
  console.error('\nError: Required argument missing: dir');
  program.help();
  process.exit(1);
}
// Engine is required
if (!program.engine) {
  console.error('\nError: Required argument missing: engine');
  program.help();
  process.exit(1);
}
else {
  config.engine = config.engine.toLowerCase();
  if (!~Object.keys(ENGINES).indexOf(config.engine)) {
    console.error('\nError: Engine not supported: %s', config.engine);
    program.help();
    process.exit(1);
  }
}


var filterTemplates = (function() {
  var ext = program.ext || ENGINES[program.engine].ext;
  return function(filename) {
    return path.extname(filename).toLowerCase() !== ext;
  }
})();


/*
 * Call Viewbridge
 */
if (!program.watch) {
  callViewbridge();
}
else {
  /*
   * Watch
   */
  var watchOptions = {
    ignoreDotFiles: true
  , filter:         filterTemplates
  , persistent:     true
  , interval:       500
  };
  console.info('Viewbridge watching %s', program.dir);
  watch.watchTree(program.dir, watchOptions, callViewbridge);
}


function callViewbridge() {
  viewbridge(
    {
      dir:       program.dir
    , namespace: program.namespace
    , output:    program.output
    , views:     program.views
    , engine:    program.engine
    , ext:       program.ext
    }
  , function(err, info) {
      if (err) {
        console.error('\nError:\n', err);
        process.exit(1);
      }
      if (program.output)
        console.info(info.file);
      else
        console.log(info.javascript);
    }
  );
};
